@page "/btc_usdt_futures"
@using ApiSharp.Models
@using ApiSharp.WebSocket
@using OKX.Api
@using OKX.Api.Public
@using System.Collections.Concurrent
@using STApp.Client.Service
@rendermode InteractiveServer
@inject IOKXSubscriber subscriber;

<PageTitle>BTC-USDT Futures</PageTitle>

<h1>BTC-USDT Futures</h1>
<MudGrid >
    <MudItem>
            <MudTextField @bind-Value="instrumentIdToSubscribe" Label="instrumentId" />
    </MudItem>
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="SubscribeToFutures">Subscribe</MudIconButton>
    </MudItem>       
</MudGrid>

<MudDataGrid Items="@subscriber.GetTickers()">
    <Columns>
        <PropertyColumn Property="x => x.InstrumentId" Title="Nr" />
        <PropertyColumn Property="x => x.AskPrice" />
        <PropertyColumn Property="x => x.BidPrice" />
        <TemplateColumn Title="Action">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Remove" @onclick="() => UnsubscribeFromFutures(context.Item.InstrumentId)" Color="Color.Secondary">Unsubscribe</MudIconButton>
			</CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private string instrumentIdToSubscribe = "BTC-USD-250808";
    // https://my.okx.com/api/v5/public/instruments?instType=FUTURES

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subscriber = new OKXSubscriber();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing subscriber: {ex.StackTrace}");
		}
    }
    private async Task SubscribeToFutures()
    {
        try
        {
            await subscriber.SubscribeTicker(instrumentIdToSubscribe, (t) =>
            {
                InvokeAsync(() => StateHasChanged());
            });
        }
        catch (Exception ex) {
            Console.WriteLine($"Error subscribing to {instrumentIdToSubscribe}: {ex.StackTrace}");
        }
    }

    private void UnsubscribeFromFutures(string instId)
    {
		subscriber.Unsubscribe(instId);
    }

}
